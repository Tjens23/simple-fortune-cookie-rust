name: DockerHub CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.component }}-${{ hashFiles(format('{0}/Cargo.lock', matrix.component)) }}

    - name: Run tests for ${{ matrix.component }}
      working-directory: ./${{ matrix.component }}
      run: cargo test --verbose

  build-and-push-dockerhub:
    name: Build and Push to DockerHub
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        component: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Build and push to DockerHub
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/fortune-${{ matrix.component }}:latest
          ${{ env.DOCKERHUB_USERNAME }}/fortune-${{ matrix.component }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dockerhub:
    name: Deploy from DockerHub
    runs-on: ubuntu-latest
    needs: build-and-push-dockerhub
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment docker-compose
      run: |
        cat > docker-compose.deploy.yml << EOF
        version: '3.8'
        
        services:
          backend:
            image: ${{ env.DOCKERHUB_USERNAME }}/fortune-backend:latest
            container_name: fortune-backend
            ports:
              - "9000:9000"
            environment:
              - REDIS_URL=redis://redis:6379
            depends_on:
              - redis
            networks:
              - fortune-network
        
          frontend:
            image: ${{ env.DOCKERHUB_USERNAME }}/fortune-frontend:latest
            container_name: fortune-frontend
            ports:
              - "8080:8080"
            environment:
              - BACKEND_DNS=backend
              - BACKEND_PORT=9000
            depends_on:
              - backend
            networks:
              - fortune-network
        
          redis:
            image: redis:7-alpine
            container_name: fortune-redis
            ports:
              - "6379:6379"
            networks:
              - fortune-network
        
        networks:
          fortune-network:
            driver: bridge
        EOF

    - name: Deploy with DockerHub images
      run: |
        # Pull the latest images from DockerHub
        docker-compose -f docker-compose.deploy.yml pull
        # Stop and remove existing containers
        docker-compose -f docker-compose.deploy.yml down
        # Start the application with new images
        docker-compose -f docker-compose.deploy.yml up -d
        # Wait for services to be ready
        sleep 30
        # Check if services are running
        docker-compose -f docker-compose.deploy.yml ps
        # Test the application
        curl -f http://localhost:8080/healthz || exit 1
